/******************************************************************************\
FILE:           stimuli.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
MODIFIED BY:    Alex Manus (UiL-OTS) <A.T.Manus@uu.nl>
ADAPTED BY:     Hans Rutger Bosker (UiL-OTS) <H.R.Bosker@uu.nl>

DESCRIPTION:

Defines the formats of item table(s) and provides the actual content of
the item table(s) i.e. stimulus information.


HISTORY:
2012-09-21 TV   Created.
2012-10-02 HRB  Adapted from four-image VWP to two-image VWP.

\******************************************************************************/

plugin zep_file;

// Symbolic definition of item type.
enum ItemType
{
    A,
    B,
    C
}

enum ScreenLocation
{
    CENTER,
    TOP_LEFT,
    TOP_RIGHT,
    BOTTOM_LEFT,
    BOTTOM_RIGHT
}

// Item record used for the test phase item table.
record TestItem
{
    int      id;             // item id
    ItemType    type;           // item type
    int             target_onset;
    string      image_filename0;          // image stimulus filename
    string      instruction;                    // image stimulus filename      
    string      image_filename1;          // image stimulus filename
    string      image_filename2;          // image stimulus filename
    string      image_filename3;          // image stimulus filename
    string      image_filename4;          // image stimulus filename
    string      image_correct_filename;
    string      sound_filename;          // sound stimulus filename
    bool        record_eye_movements;         // if set, record eye movements
    bool        do_drift_check;       // if set, perform drift check
}

// Item table used in the test phase.
TestItem[..] test_items;

int all_stimuli_items_exist()
{
     if(all_items_files_exists(test_items)==ERROR)
    {
        println("some items do not exist, error.");
        return ERROR;          
    }
    return OK;
}

int all_items_files_exists(TestItem[] items)
{
    int index = 0;

    while(index < items.size)
    {
        TestItem item = items[index];
        
        string full_path_to_image0 = stimuli_dir() + "images/" + item.image_filename0;
        string full_path_to_image1 = stimuli_dir() + "images/" + item.image_filename1;
        string full_path_to_image2 = stimuli_dir() + "images/" + item.image_filename2;
        string full_path_to_image3= stimuli_dir() + "images/" + item.image_filename3;
        string full_path_to_image4 = stimuli_dir() + "images/" + item.image_filename4;
        string full_path_to_sound = stimuli_dir() + "sounds/" + item.sound_filename;

        if(!file_exists(full_path_to_image0))
        {
            println("ERROR: could not locate " + full_path_to_image0);
             return ERROR;
        }
        if(!file_exists(full_path_to_image1))
        {
            println("ERROR: could not locate " + full_path_to_image1);
             return ERROR;
        }
        if(!file_exists(full_path_to_image2))
        {
            println("ERROR: could not locate " + full_path_to_image2);
             return ERROR;
        }
        if(!file_exists(full_path_to_image3))
        {
            println("ERROR: could not locate " + full_path_to_image3);
             return ERROR;
        }
         if(!file_exists(full_path_to_image4))
        {
            println("ERROR: could not locate " + full_path_to_image4);
             return ERROR;
        }
        if(!file_exists(full_path_to_sound))
        {
             println("ERROR: could not locate " + full_path_to_sound);
            return ERROR;
        }
        index++;
    }

    return OK;   
}

int load_stimuli(string source)
{
     if (load_stimuli_from(source) != OK)
        {
            println("problem loading stimuli from file, terminating\n" );
            return ERROR;
        }
        return OK;        
}

int shuffle_stimuli()
{
    if (shuffle_test_items() != OK) 
    {
        println("problem shuffling stimuli, terminating\n" );
        return ERROR;
    }
    return OK;
}

// Loads item table(s) from CSV file(s) in the stimuli folder
int load_stimuli_from(string source)
{
    // Uncomment relevant parts below to load stimuli from CSV file.

    int err;
    // Load data into test_items table.
    err = test_items.load(stimuli_dir() + source, 
        true,           // if true, file contains a header row
        1);             // number of lines to skip before header and data
    if (err) return err;

    return OK;
}

// Saves item table(s) as CSV file(s) in the script folder.
void save_stimuli(string output)
{
    test_items.save(script_dir() + output, 
        "Test items");
}
